//better solution

ListNode *partition(ListNode *head, int x) {
    ListNode node1(0), node2(0);
    ListNode *p1 = &node1, *p2 = &node2;
    while (head) {
        if (head->val < x)
            p1 = p1->next = head;
        else
            p2 = p2->next = head;
        head = head->next;
    }
    p2->next = NULL;
    p1->next = node2.next;
    return node1.next;
}





class Solution {
public:
///partition list create two lists 
    ListNode* partition(ListNode* head, int x) {
        ///two list then merge
        ListNode* cur_1, *cur_2;
        ListNode* head_1, *head_2;
        cur_1 = NULL;
        cur_2 = NULL;
        head_1 = NULL;
        head_2 = NULL;
        ListNode* cur = head;
        
        if(head == NULL) return head;
        while(cur != NULL) {
            if(cur->val < x) {
                if(cur_1 == NULL) {
                    head_1 = cur;
                    cur_1 = cur;
                } else {
                    cur_1->next = cur;
                    cur_1 = cur_1->next;
                }
            } else {
                if(cur_2 == NULL) {
                    head_2 = cur;
                    cur_2 = cur;
                } else {
                    cur_2->next = cur;
                    cur_2 = cur_2->next;
                }
            }
            cur = cur->next;
            if(cur_1)
            cur_1->next = NULL;
            if(cur_2)
            cur_2->next = NULL;
        }
        if(cur_1 == NULL) return head_2;
        else {
            cur_1->next = head_2;
            return head_1;
        }
    }
};
