/* top down version */
public TreeNode sortedListToBST(ListNode head) {
    if(head == null)
        return null;
    ListNode fast = head;
    ListNode slow = head;
    ListNode prev =null; 
    while(fast != null && fast.next != null)
    {
        fast = fast.next.next;
        prev =slow;
        slow=slow.next;
    }
    TreeNode root = new TreeNode(slow.val);
    if(prev != null)
        prev.next = null;
    else
        head  = null;

    root.left = sortedListToBST(head);
    root.right = sortedListToBST(slow.next);
    return root;
}
/* bottom up version  */
1. use count or start_idx & end_idx to create the left subtree
2. move the global linked list node pointer whenever a node in the linked list is in the tree 
3. build the right subtree 

note the way to move the node in linked list
helper(TreeNode*& head) 
    head = head->next;
like this :)
