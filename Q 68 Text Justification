class Solution {
public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
        int start = 0, end = -1, totLen = 0;
        bool isLast = false;
        int L = maxWidth;
        vector<string> ret;
        int i = 0;
        while(i < words.size()) {
             if(words[i].size() > maxWidth) return ret;
             //end = -1 as a start to calcualte the space here
             int newLen = totLen + (end - start + 1) + words[i].size();
             
             if(newLen <= L) {
                ///checked and then update
                 end = i;
                 totLen += words[i].size();
                 //since i is added ahead ,counting ahead ensures that you can count the space and also figure out the last line
                 ///then can not ensure the i will be at the same line 
                 i++;
             }
             else { 
                string line = createLine(words, L, start, end, totLen, false);
                ret.push_back(line);
                start = i;
                end = i - 1;
                totLen = 0;
                
            /// i is already at the next item not been processed
             }
        }
        ///since end is (i-1), so when exit the while loop
        string lastLine = createLine(words, L, start, end, totLen, true);
        ret.push_back(lastLine);
        return ret;
    }
    
    string createLine(vector<string> &words, int L, int start, int end, int totLen, bool isLast) {
         string ret;
         if(start < 0 || end >= words.size() || start > end) return ret;
         
         ret.append(words[start]);
         
         int n = end - start + 1;
         
         if(n == 1 || isLast) { 
            for(int i = start + 1;  i <= end; i++)
                ret.append(" " + words[i]);
            int j = L - totLen - (n - 1);
            ret.append(j, ' ');
        // only building one single line each time
            return ret;
         }
             
         int k = (L - totLen) / (n-1), m = (L- totLen) % (n-1);
         for(int i = start + 1; i <= end; i++) {
              int nspace = i - start <= m ? k+1 : k;
              ret.append(nspace, ' ');
              ret.append(words[i]);
         }
         return ret;
    }
 
};
