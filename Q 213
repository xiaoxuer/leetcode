class Solution {
public:
    int helper(vector<int>& nums, int start, int end) {
        int size = end - start + 1;
        
        if(size <= 0)
            return 0;
            
        vector<int> dp(size, 0);
        dp[0] = nums[start];
        if(size == 1) return dp[0];
        dp[1] = max(nums[start + 1], dp[0]);
        for(int i = 2; i < size; i++) {
            dp[i] = max(dp[i-1], dp[i-2] + nums[start + i]);
        }
        return dp[size - 1];
    }
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(n == 1)
            return nums[0];
        if(n == 2)
            return max(nums[0], nums[1]);
    
        int path_1 = helper(nums, 0, n-2);
        int path_2 = helper(nums, 1, n -1);
        return max(path_1, path_2);
    }
};
