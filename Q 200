class Solution {
public:
    void pruning(vector<vector<char>>& grid, int res, int i, int j) {
            int row = grid.size();
            int col = grid[0].size();
            if(i >= row || j >= col || i < 0 || j < 0) return;
            if(grid[i][j] == '1') {
                grid[i][j] = 'A' + res;
                pruning(grid, res, i + 1, j);
                pruning(grid, res, i - 1, j);
                pruning(grid, res, i, j + 1);
                pruning(grid, res, i, j - 1);
            }
    }
    
    int numIslands(vector<vector<char>>& grid) {
        int res = 0;
        int row = grid.size();
        if(row == 0) return 0;
        int col = grid[0].size();
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(grid[i][j] == '1') {
                    pruning(grid, res, i, j);
                    res++;
                } else
                    continue;
            }
        }
        return res;
        
    }
};

BFS solution: 
use visited queue  & mark as it goes 
