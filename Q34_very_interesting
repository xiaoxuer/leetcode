class Solution {
public:
    void helper(vector<int>& res, vector<int>& nums, int target, int s_idx, int e_idx) {
        if(s_idx > e_idx) return;
        int mid = s_idx + (e_idx - s_idx) / 2;
        if(nums[mid] == target) {
            res[0] = res[0] == -1 ? mid : min(res[0], mid);
            res[1] = res[1] == -1 ? mid : max(res[1], mid);
            helper(res, nums, target, s_idx, mid - 1);
            helper(res, nums, target, mid + 1, e_idx);
        } else if(nums[mid] < target) {
            helper(res, nums, target, mid + 1, e_idx);
        } else {
            helper(res, nums, target, s_idx, mid - 1);
        }
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res(2, -1);
        int size = nums.size();
        helper(res, nums, target, 0, size - 1);
        return res;
    }
};
