class Solution {
public:
    int minCut(string s) {
        int len = s.length();
        vector<int> dp(len, 0);
        vector<vector<int>> chk(len, vector<int>(len, 0));
        for(int i = 0; i < len; i++) dp[i] = i; //init case one char per palidrome 
        //create  ch) {
        for(int l = 1; l <= len; l++) {
            for(int i = 0; i <= len - l; i++) {
                if(l == 1) {
                    chk[i][i] = 1;
                } else if(l == 2) {
                    chk[i][i + l - 1] = (s[i] == s[i+1]) ? 1 : 0;
                } else {
                    chk[i][i + l - 1] = ((s[i] == s[i+l-1]) && chk[i+1][i+l-2]) ? 1 : 0;
                }
            }
        }
        
        for(int i = 1; i < len; i++) {
            if(chk[0][i]) {
                dp[i] = 0;
                continue;
            }
            for(int j = 0; j < i; j++) {
                if(chk[j+1][i])
                    dp[i] = min(dp[i], dp[j] + 1);
            }
        }
        return dp[len-1];
    }
};
