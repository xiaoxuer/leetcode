class Solution {
public: 
//one-dimension DP
    bool canJump(vector<int>& nums) {
        int distance;
        int size = nums.size();
        int reach[size];
        if (size == 1)
            return true;
        for(int i = 0; i < size; i++) {
            if(i == 0)
                reach[i] = nums[i];
            else
                reach[i] = max(nums[i], reach[i-1] - 1);
            if(reach[i] <= 0 && (i !=(size -1)))
                return false;
        }
        
        return true;
    }
};

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int size = nums.size();
        int target = nums[0];
        int i = 0;
        while(i <= target && i < size) {
            if(target >= (size - 1)) return true;
            target = max(target, nums[i] + i);
            i++;
        }
        return false;
    }
};
