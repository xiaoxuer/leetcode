class Solution {
public:
int convert_to_num(char ch)
{
     if(ch == 'A')  
        return 0;
     if(ch == 'C')
        return 1;
     if(ch == 'G')
        return 2;
     if(ch == 'T')
        return 3;
        
}
vector<string> findRepeatedDnaSequences(string s) {
        //bit shifting  ? 
        //http://www.cnblogs.com/hzhesi/p/4285793.html
        int size = s.length();
        vector<string> res;
        int cur = 0;
        if(size <= 10)
            return res; 
        for(int i = 0; i < 10; i++) { 
            cur <<= 2;
            cur |= convert_to_num(s[i]);
        }
        unordered_map<int, int> hash_map;
        hash_map[cur] = 1;
        for(int i = 10; i < size; i++) {
             cur &= ~0xC0000;
             cur <<= 2;
             cur |= convert_to_num(s[i]);
             if(hash_map.find(cur) != hash_map.end())  {
                if(hash_map[cur] == 1)
                    res.push_back(s.substr(i-10 + 1, 10));
                hash_map[cur]++;
             }
             else   
                hash_map[cur] = 1;
        }
        return res;
    
    }
};
