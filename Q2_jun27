//play with code tail recursion, may not be perfect


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* helper(ListNode* l1, ListNode* l2, int carry) {
        if(l1 == NULL && l2 == NULL && carry == 0) return NULL;
        ListNode* res = new ListNode(0);
        int val = carry;
        val += l1 == NULL ? 0 : l1->val;
        val += l2 == NULL ? 0 : l2->val;
        res->val = val % 10;
        carry = val / 10;
        res->next = helper(l1 == NULL ? l1 : l1->next, l2 == NULL ? l2 : l2->next, carry);
        return res;
        
    }
    
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry = 0;
        ListNode* dummy = new ListNode(-1);
        dummy->next = helper(l1, l2, carry);
        return dummy->next;
    }
};
