class Solution {
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
  
        int m = matrix.size();
        int n = m == 0 ? 0 : matrix[0].size();
        
        vector<vector<int>> height(m, vector<int>(n, 0));
        int maxArea = 0;
        for(int i = 0 ; i < m; i++) { 
            for(int j = 0; j < n; j++) { 
                if(matrix[i][j] == '0')
                    height[i][j] = 0;
                else

                ///to the lower m + 1 compare to line m, it is accumulating all the  blocks above
                    height[i][j] = (i == 0) ? 1 : (height[i-1][j] + 1);
            }
        }
        
        for(int i = 0; i < m; i++) {
            int area = maxAreaInHist(height[i]);
            if(area > maxArea)
                maxArea = area;
        }
        return maxArea;
    }
    
    int maxAreaInHist(vector<int> height) {
         stack<int> sta;
         int i = 0; 
         int maxArea = 0;
         while(i < height.size()) {
              if(sta.empty() || height[sta.top()] <= height[i])
                sta.push(i++);
              else { 
                  int t = sta.top();
                  sta.pop();
                  maxArea = max(maxArea, height[t] * (sta.empty() ? i : i - sta.top() - 1));
              }
         }
         int len = height.size();
         while(!sta.empty()) {
              int ph = sta.top();
              sta.pop();
              if(!sta.empty()) 
                   maxArea = max(maxArea, (len - sta.top() - 1) * height[ph]);
              else
                   maxArea = max(maxArea, len * height[ph]);
              
         }
         return maxArea;
    } 
    
};
